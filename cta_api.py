# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pwHZo1APplihQVvkVvHUeAQ9E8POMS6s
"""

red_line_stations = {
    "Howard":                   "40900",
    "Jarvis":                   "41190",
    "Morse":                    "40100",
    "Loyola":                   "41300",
    "Bryn Mawr":                "41380",
    "Berwyn":                   "40340",
    "Argyle":                   "41200",
    "Lawrence":                 "40770",
    "Sheridan":                 "40080",
    "Addison (Red Line)":       "41420",
    "Belmont (Red, Brown, Purple Lines)": "41320",
    "Fullerton":                "41220",
    "North/Clybourn":           "40650",
    "Chicago (Red Line)":       "41450",
    "Grand (Red Line)":         "40330",
    "Monroe (Red Line)":        "41090",
    "Jackson (Red Line)":       "40560",
    "Roosevelt":                "41400",
    "Sox-35th":                 "40190",
    "47th (Red Line)":          "41230",
    "Garfield (Red Line)":      "41170",
    "63rd":                     "40910",
    "69th":                     "40990",
    "79th":                     "40240",
    "87th":                     "41430",
    "95th":                     "40450",
}

import requests
import pandas as pd
import time
from datetime import datetime, timedelta
import pytz


CTA_TRAIN_TRACKER_URL = "http://lapi.transitchicago.com/api/1.0/ttarrivals.aspx"

API_KEY = "8e6648bdf10240f082b11ab99cfa38ba"

ROUTE = "Red"

def get_arrivals(map_id):
    params = {
        "key": API_KEY,
        "mapid": map_id,
        "outputType": "JSON"
    }
    response = requests.get(CTA_TRAIN_TRACKER_URL, params=params)
    response.raise_for_status()
    return response.json()

# find next train after specified time

central = pytz.timezone('America/Chicago')

def find_next_train(arrivals, route="Red", after_time=None):
    # print(after_time)
    trains = []
    for eta in arrivals.get('ctatt', {}).get('eta', []):
        # print("eta", eta)
        # print("eta", eta['rt'])
        if eta['rt'] == ROUTE:
            # print("print eta arrt", eta['arrT'])
            arr_time = datetime.strptime(eta['arrT'], "%Y-%m-%dT%H:%M:%S")
            arr_time = central.localize(arr_time)
            # print(after_time)
            # print(arr_time)
            if after_time is None or arr_time >= after_time:
                arr_time = arr_time.replace(tzinfo=None)
                trains.append({
                    "arrival_time": arr_time,
                    "run_number": eta['rn']
                })
    if trains:
        trains.sort(key=lambda x: x['arrival_time'])
        return trains[0]
    else:
        return None

# tester

central = pytz.timezone('America/Chicago')
start_time = datetime.now(central)
# print(start_time)

arrival_test = get_arrivals("41320")
# print(arrival_test)
print(find_next_train(arrival_test, after_time=start_time))

def track_train_to_destination(end_map_id, run_number):
    arrivals = get_arrivals(end_map_id)
    # print(arrivals)

    for eta in arrivals.get('ctatt', {}).get('eta', []):
        if eta.get('rn') == run_number:
            return datetime.strptime(eta['arrT'], "%Y-%m-%dT%H:%M:%S")
    return None

next_train = find_next_train(arrival_test, after_time=start_time)
# print(next_train)

print(track_train_to_destination("41320", next_train['run_number']))

def plan_trip(start_station_name, end_station_name, user_start_time=None):

    start_map_id = red_line_stations.get(start_station_name)
    end_map_id = red_line_stations.get(end_station_name)


    if not start_map_id or not end_map_id:
        print("Invalid start or end station name.")
        return

    arrivals = get_arrivals(start_map_id)

    # print(arrivals)

    if user_start_time is None:
        user_start_time = datetime.now(central)
    else:
        if user_start_time.tzinfo is None:
            user_start_time = central.localize(user_start_time)

    next_train = find_next_train(arrivals, after_time=user_start_time)


    if not next_train:
        print("No next Red Line train found after given start time.")
        return

    run_number = next_train['run_number']
    departure_time = next_train['arrival_time']

    arrival_time_at_destination = track_train_to_destination(end_map_id, run_number)

    if arrival_time_at_destination:
        print(f"Board train (run number {run_number}) at {start_station_name} at {departure_time}")
        print(f"Arrive at {end_station_name} at {arrival_time_at_destination}")
    else:
        print("Couldn't find arrival time at destination for this train.")

plan_trip("Howard", "Loyola")